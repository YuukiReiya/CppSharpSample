// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace CppSharpSampleBinding
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FnSum(int __0, int __1);

    public unsafe partial class NativeFunctionTable : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr Destroy;
            internal __IntPtr GetValue;
            internal __IntPtr SetValue;
            internal __IntPtr Print;

            [SuppressUnmanagedCodeSecurity, DllImport("CppSharpSampleNative", EntryPoint = "??0NativeFunctionTable@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CppSharpSampleBinding.NativeFunctionTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CppSharpSampleBinding.NativeFunctionTable>();

        protected bool __ownsNativeInstance;

        internal static NativeFunctionTable __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new NativeFunctionTable(native.ToPointer(), skipVTables);
        }

        internal static NativeFunctionTable __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (NativeFunctionTable)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static NativeFunctionTable __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new NativeFunctionTable(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NativeFunctionTable(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NativeFunctionTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public NativeFunctionTable()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpSampleBinding.NativeFunctionTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public NativeFunctionTable(global::CppSharpSampleBinding.NativeFunctionTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpSampleBinding.NativeFunctionTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::CppSharpSampleBinding.NativeFunctionTable.__Internal*) __Instance) = *((global::CppSharpSampleBinding.NativeFunctionTable.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::CppSharpSampleBinding.Delegates.Action___IntPtr Destroy
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Destroy;
                return __ptr0 == IntPtr.Zero? null : (global::CppSharpSampleBinding.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::CppSharpSampleBinding.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Destroy = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::CppSharpSampleBinding.Delegates.Func_int___IntPtr GetValue
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetValue;
                return __ptr0 == IntPtr.Zero? null : (global::CppSharpSampleBinding.Delegates.Func_int___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::CppSharpSampleBinding.Delegates.Func_int___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->GetValue = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::CppSharpSampleBinding.Delegates.Action___IntPtr_int SetValue
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->SetValue;
                return __ptr0 == IntPtr.Zero? null : (global::CppSharpSampleBinding.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::CppSharpSampleBinding.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->SetValue = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::CppSharpSampleBinding.Delegates.Action___IntPtr Print
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Print;
                return __ptr0 == IntPtr.Zero? null : (global::CppSharpSampleBinding.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::CppSharpSampleBinding.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Print = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class header
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("CppSharpSampleNative", EntryPoint = "Sum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Sum(int a, int b);

            [SuppressUnmanagedCodeSecurity, DllImport("CppSharpSampleNative", EntryPoint = "Sum2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Sum2(__IntPtr fn, int a, int b);

            [SuppressUnmanagedCodeSecurity, DllImport("CppSharpSampleNative", EntryPoint = "GetFunctionTable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetFunctionTable();

            [SuppressUnmanagedCodeSecurity, DllImport("CppSharpSampleNative", EntryPoint = "CreateNativeContext", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr CreateNativeContext();

            [SuppressUnmanagedCodeSecurity, DllImport("CppSharpSampleNative", EntryPoint = "TestCallback", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TestCallback(__IntPtr funcTable, __IntPtr context);
        }

        public static int Sum(int a, int b)
        {
            var __ret = __Internal.Sum(a, b);
            return __ret;
        }

        public static int Sum2(global::CppSharpSampleBinding.FnSum fn, int a, int b)
        {
            var __arg0 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            var __ret = __Internal.Sum2(__arg0, a, b);
            return __ret;
        }

        public static global::CppSharpSampleBinding.NativeFunctionTable GetFunctionTable()
        {
            var __ret = __Internal.GetFunctionTable();
            var __result0 = global::CppSharpSampleBinding.NativeFunctionTable.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static __IntPtr CreateNativeContext()
        {
            var __ret = __Internal.CreateNativeContext();
            return __ret;
        }

        public static void TestCallback(global::CppSharpSampleBinding.NativeFunctionTable funcTable, __IntPtr context)
        {
            var __arg0 = funcTable is null ? __IntPtr.Zero : funcTable.__Instance;
            __Internal.TestCallback(__arg0, context);
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr(__IntPtr __0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr(__IntPtr __0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_int(__IntPtr __0, int __1);
    }
}
